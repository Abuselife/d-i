<!-- Start of file post-install/post-install.xml -->
<!-- $Id: post-install.xml 43623 2006-12-29 03:47:48Z fjp $ -->

<chapter id="post-install">
 <title
>다음 단계 및 그 다음에 할 일</title>


<!-- Start of file post-install/shutdown.xml -->
<!-- $Id: shutdown.xml 39942 2006-08-18 01:43:34Z nabetaro-guest $ -->


 <sect1 id="shutdown">
 <title
>시스템 끄기</title>

<para
>동작하는 리눅스 시스템을 셧다운할 때는, (컴퓨터의 앞이나 뒤에 있는) 리셋 스위치를 눌러서 다시 시작하거나 컴퓨터 전원을 끄면 안 됩니다. 리눅스는 정해진 방법을 이용해서 꺼야 하고, 그렇지 않으면 파일이 지워지거나 디스크가 손상될 수 있습니다. 데스크탑 환경에서 동작하는 시스템이라면, 프로그램 메뉴에 <quote
>로그아웃</quote
> 옵션이 있고 그 메뉴에서 시스템을 끌 수 (아니면 다시 시작할 수) 있습니다. </para
><para
>다른 방법으로 <keycombo
> <keycap
>Ctrl</keycap
> <keycap
>Alt</keycap
> <keycap
>Del</keycap
> </keycombo
> <phrase arch="powerpc;m68k"
>아니면 매킨토시 시스템에서는 <keycombo
> <keycap
>Control</keycap
> <keycap
>Shift</keycap
> <keycap
>Power</keycap
> </keycombo
> </phrase
>키 조합을 누를 수도 있습니다. 또 다른 방법으로 위의 키 조합이 동작하지 않거나 명령어 사용을 더 좋아한다면, 루트(root)로 로그인해서 <command
>poweroff</command
>, <command
>halt</command
> 아니면 <command
>shutdown -h now</command
> 명령을 사용하고 시스템을 다시 시작하려면 <command
>reboot</command
> 명령을 사용합니다. </para>
 </sect1>
<!--   End of file post-install/shutdown.xml -->

<!-- Start of file post-install/new-to-unix.xml -->
<!-- $Id: new-to-unix.xml 28672 2005-06-26 10:06:30Z fjp $ -->


 <sect1 id="unix-intro">
 <title
>유닉스를 처음 접한다면</title>
<para
>유닉스를 처음 접한다면, 책을 사서 읽어 보는 게 좋을 것입니다. 또 여러가지 좋은 정보가 <ulink url="&url-debian-reference;"
>Debian Reference</ulink
>에 있습니다. <ulink url="&url-unix-faq;"
>list of Unix FAQs</ulink
>에는 기억에 남을 만한 훌륭한 참고자료로 여러가지 유즈넷 문서 목록이 들어 있습니다. </para
><para
>리눅스는 유닉스를 구현한 것입니다. <ulink url="&url-ldp;"
>Linux Documentation Project (LDP)</ulink
> 사이트에는 리눅스에 관한 여러가지 HOWTO와 온라인 서적이 있습니다. 이 문서를 컴퓨터에 직접 설치할 수도 있습니다. <classname
>doc-linux-html</classname
> 패키지 (HTML 버전) 아니면 <classname
>doc-linux-text</classname
> 패키지를 (ASCII 버전) 설치하시고, <filename
>/usr/share/doc/HOWTO</filename
> 안의 파일을 읽어보십시오. LDP HOWTO도 여러가지 언어로 된 데비안 패키지가 있습니다. </para>

 </sect1>
<!--   End of file post-install/new-to-unix.xml -->

<!-- Start of file post-install/orientation.xml -->
<!-- $Id: orientation.xml 43576 2006-12-27 03:35:13Z fjp $ -->


 <sect1 id="debian-orientation"
><title
>데비안에 익숙해지기</title>
<para
>데비안은 다른 배포판과 약간 다릅니다. 다른 배포판에 익숙해져 있다고 해도, 몇 가지는 알아둬야 시스템을 훌륭하고 깔끔한 상태로 유지합니다. 이 장에서는 데비안에 익숙해지는 방법을 설명합니다. 데비안을 사용하는 방법을 하나하나 설명하지는 않고, 성급한 분을 위해 아주 약간의 시스템 개요만 설명합니다. </para>

  <sect2
><title
>데비안 패키지 시스템</title>
<para
>알아 둬야 하는 가장 중요한 개념은 데비안 패키지 시스템입니다. 원칙적으로 패키지 시스템이 시스템의 대부분을 제어합니다. 이 부분은: <itemizedlist
> <listitem
><para
> <filename
>/usr</filename
> (<filename
>/usr/local</filename
> 제외) </para
></listitem
> <listitem
><para
> <filename
>/var</filename
> (<filename
>/var/local</filename
>을 만들면 그 안에서는 제어하지 않음) </para
></listitem
> <listitem
><para
> <filename
>/bin</filename
> </para
></listitem
> <listitem
><para
> <filename
>/sbin</filename
> </para
></listitem
> <listitem
><para
> <filename
>/lib</filename
> </para
></listitem
> </itemizedlist
> 예를 들어 <filename
>/usr/bin/perl</filename
> 파일을 덮어 썼다고 하면 당장은 덮어 쓴 파일로 동작하긴 하지만, <classname
>perl</classname
> 패키지를 업그레이드하면 그 파일을 업그레이드하면서 다시 덮어 씁니다. 고급 사용자라면 <command
>aptitude</command
>에서 해당 패키지를 <quote
>고정</quote
>상태로 놓아서 이 문제를 피해갑니다. </para
><para
>APT는 가장 훌륭한 패키지 설치 도구의 하나입니다. 명령행 방식의 <command
>apt-get</command
>을 사용할 수도 있고, 텍스트 전체 화면 방식의 <application
>aptitude</application
>를 사용할 수도 있습니다. APT를 이용해 main, contrib, non-free 모두에서 설치할 수 있고, 또 표준 패키지 외에 특정 국가로 수출이 제한되어 있는 패키지까지도 설치할 수 있습니다. </para>
  </sect2>

  <sect2
><title
>프로그램 버전 관리</title>
<para
>같은 이름의 프로그램이 여러가지 버전이 있는 경우 update-alternatives에서 관리합니다. 여러 버전의 프로그램을 관리하고 있다면, update-alternative 맨페이지를 읽어 보십시오. </para>
  </sect2>

  <sect2
><title
>CRON 작업 관리</title>
<para
>시스템 관리자 권한으로 하는 작업은 설정 파일이므로, 모두 <filename
>/etc</filename
> 안에 들어 있어야 합니다. 루트 권한으로 매일, 매주, 매달 실행할 CRON 작업이 있으면, 그 스크립트를 <filename
>/etc/cron.{daily,weekly,monthly}</filename
> 아래에 넣으십시오. 이 스크립트는 <filename
>/etc/crontab</filename
>에서 실행하고, 알파벳 순서로 하나씩 실행합니다. </para
><para
>한편 (1) 특정 사용자로 실행할 CRON 작업이 있거나 (2) 특정 시간이나 특정 주기로 실행할 작업이 있으면 <filename
>/etc/crontab</filename
>을 사용하거나, 아니면 더 좋은 방법으로 <filename
>/etc/cron.d/아무개</filename
>를 사용할 수 있습니다. 이 파일에는 CRON 작업을 실행할 사용자를 지정하는 필드가 따로 있습니다. </para
><para
>어떤 방법을 사용하든 파일을 편집하기만 하면 CRON에서 자동으로 인식하고 처리합니다. 다른 명령어를 실행할 필요가 없습니다. 더 자세한 정보는 cron(8), crontab(5), <filename
>/usr/share/doc/cron/README.Debian</filename
> 파일을 참고하십시오. </para>
  </sect2>
 </sect1>
<!--   End of file post-install/orientation.xml -->

<!-- Start of file post-install/further-reading.xml -->
<!-- $Id: further-reading.xml 30719 2005-09-21 21:05:48Z stappers $ -->

 <sect1 id="further-reading"
><title
>그 외의 읽을 거리 및 정보</title>
<para
>특정 프로그램에 대한 정보를 보려면, <userinput
>man <replaceable
>프로그램</replaceable
></userinput
> 명령을 실행해 보시고, 아니면 <userinput
>info <replaceable
>프로그램</replaceable
></userinput
> 명령을 실행해 보십시오. </para
><para
><filename
>/usr/share/doc</filename
>에도 좋은 문서가 많이 들어 있습니다. 특히 <filename
>/usr/share/doc/HOWTO</filename
> 및 <filename
>/usr/share/doc/FAQ</filename
>에 재미있는 정보가 많이 들어 있습니다. 버그를 제출하려면 <filename
>/usr/share/doc/debian/bug*</filename
> 파일을 보십시오. 어떤 프로그램의 데비안 관련 정보를 보려면 <filename
>/usr/share/doc/(패키지이름)/README.Debian</filename
> 파일을 보십시오. </para
><para
><ulink url="http://www.debian.org/"
>데비안 홈페이지</ulink
>에는 많은 양의 데비안 관련 문서가 있습니다. 특히 <ulink url="http://www.debian.org/doc/FAQ/"
>데비안 GNU/리눅스 FAQ</ulink
> 와 <ulink url="http://www.debian.org/doc/user-manuals#quick-reference"
>데비안 레퍼런스</ulink
>를 보십시오. 기타 수많은 데비안 문서의 목록이 <ulink url="http://www.debian.org/doc/ddp"
>데비안 문서 프로젝트</ulink
>에 있습니다. 데비안 커뮤니티는 서로를 돕는 모임입니다. 데비안 메일링 리스트에 가입하려면 <ulink url="http://www.debian.org/MailingLists/subscribe"
>메일링 리스트 가입</ulink
> 페이지를 보십시오. 마지막으로 <ulink url="http://lists.debian.org/"
>데비안 메일링 리스트 아카이브</ulink
>에는 데비안에 대한 수많은 정보가 들어 있습니다. </para
><para
>GNU/리눅스에 관한 정보는 보통 <ulink url="http://www.tldp.org/"
>Linux Documentation Project</ulink
>에 보면 있습니다. 여기에 GNU/리눅스 시스템에 관한 하우투 및 다른 훌륭한 정보가 들어 있는 링크가 있습니다. </para>

 </sect1>
<!--   End of file post-install/further-reading.xml -->

<!-- Start of file post-install/mail-setup.xml -->
<!-- $Id: mail-setup.xml 48595 2007-07-23 14:30:05Z cjwatson $ -->

 <sect1 id="mail-setup">
 <title
>시스템에 전자메일 준비하기</title>
<para
>전자메일은 오늘날 많은 사람들의 삶에 중요한 위치를 차지하고 있습니다. 전자메일을 준비하는 방법은 여러가지가 있고 제대로 설정해야만 동작하는 데비안 응용프로그램이 있으므로, 여기서 기초적인 사항을 다룹니다. </para
><para
>전자메일 시스템은 크게 세 가지로 구성됩니다. 우선 사용자가 실제로 전자메일을 작성하고 읽는데 사용하는 <firstterm
>Mail User Agent</firstterm
>(MUA)가 있습니다. 그리고 한 컴퓨터에서 다른 컴퓨터로 전자메일을 전달하는 <firstterm
>Mail Transfer Agent</firstterm
>(MTA)가 있습니다. 마지막으로 받은 전자메일을 사용자의 편지함으로 전달하는 일을 하는 <firstterm
>Mail Delivery Agent</firstterm
>(MDA)가 있습니다. </para
><para
>이 세가지 기능은 각각 다른 프로그램에서 담당할 수도 있고, 한 개나 두 개 프로그램에서 담당할 수도 있습니다. 또한 전자메일 종류별로 여러가지 프로그램이 담당할 수도 있습니다. </para
><para
>리눅스 및 유닉스 시스템에서는 전통적으로 <command
>mutt</command
>가 아주 널리 쓰이는 MUA입니다. 전통적인 리눅스 프로그램 대부분과 마찬가지로 텍스트 기반 프로그램입니다. <command
>mutt</command
>는 보통 <command
>exim</command
>이나 <command
>sendmail</command
>을 MTA로 쓰고 <command
>procmail</command
>을 MDA로 씁니다. </para
><para
>그래픽 데스크탑에 대한 인기가 늘어나면서, 그놈 <command
>에볼루션</command
>이나 KDE의 <command
>kmail</command
> 혹은 모질라의 <command
>thunderbird</command
>(데비안에서는 <command
>icedove</command
>를 사용합니다<footnote
> <para
> 라이선스 문제때문에 데비안에서는 <command
>thunderbird</command
>의 이름을 <command
>icedove</command
>로 바꾸었습니다. 자세한 이야기는 이 안내서의 범위를 벗어납니다. </para
> </footnote
>)같은 그래픽 전자메일 프로그램 사용이 늘어나고 있습니다. 이런 프로그램에는 MUA, MTA, MDA의 기능이 합쳐져 있지만, 전통적인 리눅스 도구와 함께 사용할 수도 있습니다. </para>

  <sect2 id="mail-default">
  <title
>기본 전자메일 설정</title>
<para
>그래픽 메일 프로그램을 사용한다고 해도, 전통적인 MTA/MDA를 설치하고 올바르게 설정해 놓는 편이 좋습니다. 그 이유는 시스템에서 동작하는 여러가지 유틸리티가<footnote
> <para
> 예를 들어: <command
>cron</command
>, <command
>quota</command
>, <command
>logcheck</command
>, <command
>aide</command
>, &hellip; </para
> </footnote
> 시스템 관리자에게 (혹시 발생할 수 있는) 문제점이나 바뀐 사항과 같이 중요한 정보를 보낼 때 MTA/MDA를 이용하기 때문입니다. </para
><para
>이러한 이유때문에 <classname
>exim4</classname
> 및 <classname
>mutt</classname
> 패키지는 기본으로 설치합니다. (설치할 때 <quote
>표준</quote
> 태스크 선택을 해제한다면 설치하지 않습니다.) <classname
>exim4</classname
>는 MTA/MDA가 결합된 프로그램으로 작지만 매우 유연합니다. 기본값으로 시스템의 로컬 메일만 처리하도록 설정되어 있고 시스템 관리자에게 (루트 계정) 보내는 메일은 설치할 때 만드는 사용자 계정으로 배달합니다<footnote
> <para
> 루트 메일을 전달하는 계정은 <filename
>/etc/aliases</filename
>에 설정되어 있습니다. 물론 일반 사용자 계정을 만들지 않았다면 메일은 루트 계정 자체에 배달합니다. </para
> </footnote
>. </para
><para
>시스템 전자메일을 배달할 때 그 메일은 <filename
>/var/mail/<replaceable
>계정_이름</replaceable
></filename
> 파일 뒤에 추가됩니다. 해당 전자메일은 <command
>mutt</command
>로 읽을 수 있습니다. </para>
  </sect2>

  <sect2 id="mail-outgoing">
  <title
>시스템 외부에 전자메일 보내기</title>
<para
>앞에서 말한 것처럼 데비안 시스템을 설치하면 시스템 내부의 전자메일만 처리하도록 설정되어 있고, 외부로 보내는 메일이나 외부에서 메일 받기는 설정되어 있지 않습니다. </para
><para
><classname
>exim4</classname
>에서 외부 전자메일을 처리하도록 하려면, 다음의 기초 설정 옵션을 참고하십시오. 테스트 메일을 올바르게 보내고 받는 지 확인하십시오. </para
><para
>그래픽 메일 프로그램을 사용하고 여러분의 인터넷 서비스 회사 혹은 여러분의 회사의 메일 서버를 사용한다면, 외부 전자메일을 처리하려고 <classname
>exim4</classname
>를 설정할 필요가 전혀 없습니다. 사용하려는 그래픽 메일 프로그램을 설정해서 전자메일을 보내고 받는 데 이용할 서버를 올바르게 설정하십시오. (이 설정 방법은 이 안내서의 범위를 벗어납니다.) </para
><para
>외부 메일 서버를 사용하는 경우에도 각각의 유틸리티마다 올바르게 전자메일을 보내도록 설정해야 할 수 있습니다. 그러한 유틸리티의 하나가 <command
>reportbug</command
>로 데비안 패키지에 대한 버그 보고서를 보내는 기능을 하는 프로그램입니다. 기본값으로 <classname
>exim4</classname
>를 사용해 버그 보고를 보내도록 되어 있습니다. </para
><para
><command
>reportbug</command
>가 외부 메일 서버를 사용하도록 설정하려면, <command
>reportbug --configure</command
> 명령을 실행해서 MTA가 있는 지 여부를 묻는 질문에 <quote
>no</quote
>라고 답하십시오. 그러면 그 다음에 버그 보고를 보낼 때 사용할 SMTP 서버를 입력할 수 있습니다. </para>
  </sect2>

  <sect2 id="config-mta">
  <title
>Exim4 MTA 설정하기</title>
<para
>시스템에서 외부 전자메일까지 처리하게 만드려면, <classname
>exim4</classname
> 패키지를 다시 설정해야 합니다<footnote
> <para
> 물론 <classname
>exim4</classname
>를 지우고 다른 MTA/MDA로 바꿔 버릴 수도 있습니다. </para
> </footnote
>: <informalexample
><screen
># dpkg-reconfigure exim4-config
</screen
></informalexample>

</para
><para
>명령어를 (루트 권한으로) 실행하면, 설정 파일을 작은 파일로 나눌 지 여부를 물어봅니다. 잘 모르겠으면 기본 옵션을 선택하십시오. </para
><para
>그 다음에 자주 사용하는 여러 가지 전자메일 시나리오를 표시합니다. 필요한 사항에 가장 가까운 시나리오를 선택하십시오. </para>

<variablelist>
<varlistentry>
<term
>인터넷 사이트</term>
<listitem
><para
>시스템이 네트워크에 연결되어 있고 메일은 SMTP를 사용해 직접 보내고 받습니다. 다음 화면에서 시스템의 메일 이름이나 사용할 도메인의 목록 등 기본적인 질문을 물어봅니다. </para
></listitem>
</varlistentry>

<varlistentry>
<term
>스마트호스트가 메일 보내기</term>
<listitem
><para
>이 시나리오에서는 다른 컴퓨터를 통해 메일을 보냅니다. 그 다른 컴퓨터를 <quote
>스마트호스트</quote
>라고 하고, 메일을 목적지에 보내는 역할을 담당합니다. 스마트호스트는 보통 받은 메일을 저장해 놓고 있으므로, 여러분의 컴퓨터를 계속 연결해 놓지 않아도 됩니다. 메일을 받을 때는 fetchmail과 같은 프로그램으로 가져올 수도 있습니다. </para
><para
>보통 스마트호스트는 인터넷 서비스 회사의 메일 서버를 말합니다. 전화 접속 사용자의 경우에는 분명히 인터넷 서비스 회사의 서버를 말합니다. 스마트호스트는 회사의 메일 서버가 될 수도 있고, 내부 네트워크에 있는 다른 시스템이 될 수도 있습니다. </para
></listitem>
</varlistentry>

<varlistentry>
<term
>스마트호스트가 메일을 보내고, 로컬 메일 없음</term>
<listitem
><para
>이 옵션은 앞의 옵션과 같지만 로컬 전자메일 도메인에 대한 메일을 처리하지 않습니다. 시스템 내부의 메일은 (예를 들어 시스템 관리자에게 보내는 메일은) 계속 처리합니다. </para
></listitem>
</varlistentry>

<varlistentry>
<term
>로컬 배달</term>
<listitem
><para
>시스템이 기본값으로 이렇게 설정되어 있습니다. </para
></listitem>
</varlistentry>

<varlistentry>
<term
>지금 설정 안함</term>
<listitem
><para
>무슨 일을 하는 지 확실히 알고 있는 경우에만 선택합니다. 이 옵션을 사용하면 메일 시스템을 설정되지 않은 상태로 남겨 놓습니다. 설정하지 않으면 메일을 보내거나 받을 수 없을 뿐만아니라 시스템 유틸리티가 보내는 중요한 메시지를 놓칠 수 있습니다. </para
></listitem>
</varlistentry>
</variablelist>

<para
>이 시나리오가 모두 맞지 않거나, 아니면 좀 더 세밀한 설정을 하고 싶다면, 설치를 다 마친 다음에 <filename
>/etc/exim4</filename
> 디렉토리 아래의 설정 파일을 설정할 수 있습니다. <classname
>exim4</classname
>에 대한 좀 더 자세한 정보는 <filename
>/usr/share/doc/exim4</filename
>에 들어 있습니다. <filename
>README.Debian.gz</filename
> 파일에 <classname
>exim4</classname
>에 설정에 대한 더 자세한 정보가 들어 있고 어디에서 더 자세한 문서를 찾을 수 있는 지 쓰여 있습니다. </para
><para
>공식적인 도메인 이름이 없을 때 인터넷으로 직접 메일을 보내면 받는 서버의 스팸 방지 장치때문에 메일이 거부될 수도 있습니다. ISP의 메일 서버를 사용하는 게 좋습니다. 정말로 메일을 직접 보내고 싶다면, 기본으로 만드는 전자메일 주소가 아닌 다른 주소를 사용하십시오. <filename
>/etc/email-addresses</filename
>에 한 줄 추가하면 전자메일 주소를 바꿀 수 있습니다. </para>
  </sect2>
 </sect1>
<!--   End of file post-install/mail-setup.xml -->

<!-- Start of file post-install/kernel-baking.xml -->
<!-- $Id: kernel-baking.xml 40980 2006-09-26 00:27:16Z fjp $ -->

 <sect1 id="kernel-baking"
><title
>새 커널 컴파일하기</title>
<para
>왜 커널을 새로 컴파일할까요? 데비안에 들어 있는 기본 커널은 대부분의 상황에서 동작하기 때문에 보통 다시 컴파일할 필요가 없습니다. 또 데비안에는 여러 가지 커널 패키지가 들어 있습니다. 그래서 하드웨어에 더 적합한 다른 커널 이미지 패키지가 있는 지 먼저 확인해 보는 게 좋습니다. 하지만 다음 이유때문에 커널을 컴파일하는 게 좋을 수도 있습니다: <itemizedlist>
<listitem
><para
>특별한 하드웨어가 필요할 때, 혹은 기존 커널에서 하드웨어 충돌이 발생할 때 </para
></listitem>
<listitem
><para
>기본 커널에서 지원하지 않는 커널 옵션 사용 (예를 들어 큰 메모리 지원) </para
></listitem>
<listitem
><para
>필요없는 드라이버를 지우는 식으로 커널을 최적화해 부팅 시간 빠르게 하기 </para
></listitem>
<listitem
><para
>모듈 여러 개로 구성된 커널 대신에 이미지 하나로 된 커널 만들기 </para
></listitem>
<listitem
><para
>새로 업데이트된 커널이나 개발 버전 커널 사용 </para
></listitem>
<listitem
><para
>리눅스 커널 공부하기 </para
></listitem>
</itemizedlist>

</para>

  <sect2
><title
>커널 이미지 관리</title>
<para
>커널 컴파일을 꺼려하지 마십시오. 재미있는 일이고 그만큼 좋은 점이 있습니다. </para
><para
>데비안 방식으로 커널을 컴파일하려면, 패키지가 몇개 필요합니다: <classname
>fakeroot</classname
>, <classname
>kernel-package</classname
>, <classname
>linux-source-2.6</classname
>및 기타 (아마도 이미 설치되어 있을) 패키지. (완전한 목록은 <filename
>/usr/share/doc/kernel-package/README.gz</filename
> 파일을 참고하십시오.) </para
><para
>이 방법을 이용해 커널 소스에서 .deb 패키지 파일을 만들고, 커널에 들어 있지 않은 모듈이 있으면 그 모듈의 .deb 파일도 커널에 맞춰서 만듭니다. 이 방법이 커널 이미지를 관리하는 더 좋은 방법입니다. <filename
>/boot</filename
> 안에 커널, System.map 및 빌드할 때 사용한 커널 설정 파일이 들어갑니다. </para
><para
><quote
>데비안 방식</quote
>으로 커널을 컴파일할 <emphasis
>필요는</emphasis
> 없습니다. 하지만 패키지 시스템을 통해 커널을 관리하는 게 더 안전하고 더 쉽습니다. <classname
>linux-source-2.6</classname
> 패키지가 아니라 직접 리누스 토발즈가 배포하는 커널 소스를 이용한다고 해도 <classname
>kernel-package</classname
> 컴파일 방법을 계속 사용할 수 있습니다. </para
><para
><filename
>/usr/share/doc/kernel-package</filename
> 안에 <classname
>kernel-package</classname
>를 사용하는 방법에 대한 문서가 있습니다. 여기에서는 간단히 어떤 단계를 거쳐야 하는지만 설명합니다. </para
><para
>여기서부터는, 루트 권한 없이 자기 홈 디렉토리에 커널 소스를 풀었다고 가정합니다<footnote
> <para
> 다른 위치에 커널 소스를 풀고 빌드할 수도 있지만, 특정 권한이 없이도 할 수 있는 가장 쉬운 방법입니다. </para
> </footnote
>. 또 커널 버전이 &kernelversion; 버전이라고 가정합니다. 커널 소스를 풀려는 디렉토리에서, <userinput
>tar xjf /usr/src/linux-source-&kernelversion;.tar.bz2</userinput
> 명령으로 커널 소스를 풀고, 새로 만들어진 <filename
>linux-source-&kernelversion;</filename
> 디렉토리로 들어가십시오. </para
><para
>그리고 커널을 설정합니다. X11을 설치했고 X11이 돌아가는 중이라면 <userinput
>make xconfig</userinput
>를 실행합니다. 아니면 <userinput
>make menuconfig</userinput
>를 실행합니다. (<userinput
>menuconfig</userinput
>는 <classname
>libncurses5-dev</classname
> 패키지를 설치해야 합니다.) 온라인 도움말을 읽어 보시면서 주의를 기울여 옵션을 선택하십시오. 뭔가 의심스러운 게 있으면, 잘 모르더라도 해당 장치 드라이버(이더넷 카드, SCSI 컨트롤러 등 하드웨어 주변장치를 관리하는 소프트웨어)를 포함하는 편이 더 좋습니다. 주의하십시오: 특정 하드웨어와는 관계없는 옵션이면서 그 옵션이 뭔지 잘 모르겠다면 기본값 그대로 놔 두십시오. <quote
>Loadable module support</quote
>에 있는 <quote
>Kernel module loader</quote
> 옵션을 꼭 선택하십시오. (기본값으로 선택이 안 되어 있습니다.) 이 옵션이 없으면, 데비안 시스템에 문제가 발생합니다. </para
><para
>소스 트리에 필요없는 파일을 지워서 <classname
>kernel-package</classname
> 파라미터를 초기화하십시오. <userinput
>make-kpkg clean</userinput
> 명령을 실행합니다. </para
><para
>이제 커널을 컴파일합니다: <userinput
>fakeroot make-kpkg --initrd --revision=custom.1.0 kernel_image</userinput
> 명령을 실행합니다. 버전 번호 <quote
>1.0</quote
>은 마음대로 바꿀 수 있습니다. 이 번호는 커널 빌드를 파악하려고 사용하는 버전 번호일 뿐입니다. 마찬가지로 <quote
>custom</quote
> 대신에 어떤 단어라도 (예를 들어 호스트 이름) 넣을 수 있습니다. 컴퓨터 속도에 따라 커널을 컴파일하는 데 좀 오래 걸릴 수도 있습니다. </para
><para
>일단 컴파일이 끝나면 다른 패키지와 같은 방법으로 직접 만든 커널을 설치할 수 있습니다. 루트 권한으로 <userinput
>dpkg -i ../linux-image-&kernelversion;-<replaceable
>서브아키텍처</replaceable
>_custom.1.0_&architecture;.deb</userinput
> 명령을 실행하십시오. <replaceable
>서브아키텍처</replaceable
> 부분은 커널 옵션에 따라 달라지는 <phrase arch="i386"
><quote
>686과 같은</quote
></phrase
> 서브아키텍처 이름입니다. <userinput
>dpkg -i</userinput
>을 실행하면 커널 및 커널과 같이 사용하는 보조 파일을 설치합니다. 커널 문제를 해결하는데 도움이 되는 <filename
>System.map</filename
> 파일이라든지 설정 사항을 담은 <filename
>/boot/config-&kernelversion;</filename
> 등의 파일을 설치합니다. 커널 패키지는 부트로더를 자동으로 업데이트해서 새로 설치한 커널을 사용하도록 설정하기도 합니다. 모듈 패키지를 만들었다면 그 패키지도 설치해야 합니다. </para
><para
>이제 시스템을 다시 시작합니다. 위에서 발생한 메세지를 잘 읽어보시고, <userinput
>shutdown -r now</userinput
> 명령을 실행하십시오. </para
><para
>데비안 커널과 커널 컴파일에 대한 더 많은 정보는 <ulink url="&url-kernel-handbook;"
>데비안 리눅스 커널 핸드북</ulink
>을 보십시오. <classname
>kernel-package</classname
>에 대한 더 많은 정보는 <filename
>/usr/share/doc/kernel-package</filename
> 안에 들어 있는 문서를 읽어보십시오. </para>
  </sect2>
 </sect1>
<!--   End of file post-install/kernel-baking.xml -->

<!-- Start of file post-install/rescue.xml -->
<!-- $Id: rescue.xml 39614 2006-08-07 15:50:11Z fjp $ -->

 <sect1 id="rescue">
 <title
>손상된 시스템 복구하기</title>
<para
>정성을 기울여 설치한 시스템에 문제가 발생해서, 부팅하지 않을 수 있습니다. 무언가 바꾸다가 부트로더 설정이 망가졌을 수도 있고, 새로 설치한 커널이 부팅하지 않을 수도 있고, 디스크가 방사선에 맞아서 <filename
>/sbin/init</filename
> 파일의 일부를 바꾸어 놨을 수도 있습니다. 어떤 원인이든지, 이 문제를 바로잡으려면, 바로잡는 동안 작업할 시스템이 하나 필요하고, 응급복구 모드를 사용하는 게 좋습니다. </para
><para
>응급복구 모드로 들어가려면, <prompt
>boot:</prompt
> 프롬프트에서 <userinput
>rescue</userinput
>라고 입력하거나 부팅 파라미터로 <userinput
>rescue/enable=true</userinput
> 부팅 파라미터로 부팅하십시오. 설치 프로그램의 맨 처음 화면이 나타나고, 지금 모드가 설치 모드가 아니라 응급복구 모드라는 사실을 알리는 말이 나타납니다. 너무 걱정하지 마십시오. 시스템을 엎어쓰지 않습니다! 설치 프로그램에 들어 있는 하드웨어 검색 기능을 디스크, 네트워크 장치 등을 복구하는 용도로 이용하는 것 뿐입니다. </para
><para
>파티션 도구 대신에 시스템의 파티션 목록이 나타나고, 그 중에 하나를 선택합니다. 보통 복구를 하려는 루트 파일시스템이 들어 있는 파티션을 선택합니다. 디스크에 있는 파티션은 물론 RAID나 LVM장치에 있는 파티션을 선택할 수도 있습니다. </para
><para
>선택한 파일 시스템 안에서 (할 수 있다면) 쉘을 실행하고 쉘 프롬프트를 표시합니다. 이 쉘에서 필요한 복구 작업을 할 수 있습니다. <phrase arch="x86"
> 예를 들어, GRUB 부트로더를 첫번째 하드 디스크의 마스터부트레코드에 다시 설치하려면, <userinput
>grub-install '(hd0)'</userinput
> 명령을 실행하면 됩니다.</phrase
> </para
><para
>선택한 루트 파일시스템에서 쉘을 실행할 수 없는 경우 (예를 들어 파일 시스템이 망가진 경우), 경고 메세지를 표시하고 설치 환경 안에서 쉘을 실행합니다. 이 환경에서는 그리 많은 프로그램을 쓸 수는 없지만, 시스템을 복구하는 용도로는 충분할 것입니다. 선택한 루트 파일시스템은 <filename
>/target</filename
> 디렉토리에 마운트되어 있습니다. </para
><para
>어떤 경우이든, 쉘을 빠져나가면 시스템이 다시 시작합니다. </para
><para
>망가진 시스템을 복구하는 일은 매우 어려울 수도 있습니다. 그리고 이 안내서는 무언가 망가졌을 때 그걸 어떻게 고치는 지에 대한 모든 사항을 설명하지 않습니다. 문제에 부딪힌 경우, 전문가에게 문의하십시오. </para>
 </sect1>
<!--   End of file post-install/rescue.xml -->

</chapter>
<!--   End of file post-install/post-install.xml -->
