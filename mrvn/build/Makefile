#!/usr/bin/make -f
#
# Debian Installer system makefile.
# Copyright 2001-2003 by Joey Hess <joeyh@debian.org> and the d-i team.
# Licensed under the terms of the GPL.
#
# This makefile builds a debian-installer system and bootable images from 
# a collection of udebs which it downloads from a Debian archive. See
# README for details.

DEB_HOST_ARCH = $(shell dpkg-architecture -qDEB_HOST_ARCH)
DEB_HOST_GNU_CPU = $(shell dpkg-architecture -qDEB_HOST_GNU_CPU)
DEB_HOST_GNU_SYSTEM = $(shell dpkg-architecture -qDEB_HOST_GNU_SYSTEM)

# Include targets config
include config/targets

# Include main config
include config/main

# Include arch configs
include config/arch/$(DEB_HOST_GNU_SYSTEM)
include config/arch/$(DEB_HOST_GNU_SYSTEM)-$(DEB_HOST_GNU_CPU)

# Include directory config
include config/dir

# Local config override.
-include config/local

# Add to PATH so dpkg will always work, and so local programs will be found.
PATH:=$(PATH):/usr/sbin:/sbin:.

# Create some links and dirs
#FOOBAR := $(shell cd pkg-lists; [ -e initrd-cdrom-base ] || ln -s initrd-cdrom-udebs initrd-cdrom-base; )
FOOBAR := $(shell mkdir -p dest stamp localudebs; )

# Prep environment for subshells
export KERNELVERSION
export KERNEL_FLAVOUR
export KERNELIMAGEVERSION
export APTDIR
export UDEBDIR
export LOCALUDEBDIR
export DEBUGUDEBDIR
export USERDEVFS
export DEBUG
export SUITE
export CODENAME
export DEB_HOST_ARCH
export LIBC_NAME
export DPKG_UNPACK_OPTIONS

# First target here to prevent arch targets to become default
all: sources.lists
	$(MAKE) $(DEST)/cdrom-boot-none-none.img
	$(MAKE) $(DEST)/cdrom-udeb-all-none.img
	$(MAKE) $(DEST)/cdrom-base-all-base.img
	$(MAKE) $(DEST)/initrd-netboot.img
	$(MAKE) $(DEST)/initrd-demo.img
	$(MAKE) $(DEST)/initrd-hd_media.img
	$(MAKE) $(DEST)/floppy-data-drivers_cd.img
	$(MAKE) $(DEST)/floppy-data-drivers_net.img
	$(MAKE) $(DEST)/floppy-boot-bootfloppy.img
	$(MAKE) $(DEST)/floppy-root-root.img

# Include arch targets
-include make/arch/$(DEB_HOST_GNU_SYSTEM)
include make/arch/$(DEB_HOST_GNU_SYSTEM)-$(DEB_HOST_GNU_CPU)

######################################################################

# Build targets


######################################################################

sources.lists:  sources.list.deb  sources.list.udeb

# Auto-generate a sources.list.
sources.list.deb:
	( \
	echo "# This file is automatically generated, edit sources.list.local instead."; \
	if [ "$(MIRROR)x" != "x" ]; then \
	  echo "deb $(MIRROR) $(SUITE) main"; \
	else \
	  cat $(SYSTEM_SOURCES_LIST) | grep ^deb\  |grep -v file:/ \
	  | grep -v debian-non-US | grep ' main' \
	  | awk '{print $$1 " " $$2}' \
	  | sed "s,/* *$$, $(SUITE) main," | uniq; \
	fi; \
	) > sources.list.deb

sources.list.udeb:
	( \
	echo "# This file is automatically generated, edit sources.list.local instead."; \
	if [ "$(MIRROR)x" != "x" ]; then \
	  echo "deb $(MIRROR) $(SUITE) main/debian-installer"; \
	else \
	  cat $(SYSTEM_SOURCES_LIST) | grep ^deb\  |grep -v file:/ \
	  | grep -v debian-non-US | grep ' main' \
	  | awk '{print $$1 " " $$2}' \
	  | sed "s,/* *$$, $(SUITE) main/debian-installer," | uniq; \
	fi; \
	) > sources.list.udeb

######################################################################

# Create a tree structure
# Install udebs from pkg-list TREE_INITRD
# Install udebs from pkg-list TREE_EXTRAS for mklibs run
# run mklibs
# remove  TREE_EXTRAS from tree
# Copy pkg-list TREE_UDEB
# Create debian mirror for pkg-list TREE_DEB
tree-%: TREE_TYPE=$*
tree-%: TREE_INITRD=$(shell echo $(TREE_TYPE)- | cut -d"-" -f1)
tree-%: TREE_UDEB=$(shell echo $(TREE_TYPE)- | cut -d"-" -f2)
tree-%: TREE_DEB=$(shell echo $(TREE_TYPE)- | cut -d"-" -f3)
tree-%: TREE_EXTRAS=$(shell echo $(TREE_TYPE)- | cut -d"-" -f4)
tree-%:
	# Create a tree
	@echo tree:
	@echo TREE_TYPE=$(TREE_TYPE)
	@echo TREE_INITRD=$(TREE_INITRD)
	@echo TREE_UDEB=$(TREE_UDEB)
	@echo TREE_DEB=$(TREE_DEB)
	@echo TREE_EXTRAS=$(TREE_EXTRAS)

	# start with a fresh tree
	-rm -rf $(TREE_DIR)
	mkdir -p $(TREE_DIR)

	# Install udebs into tree
	./initrd_install $(TREE_DIR) $(TREE_INITRD) $(TREE_EXTRAS)

	# Move the kernel image out of the way, into a temp directory
	# for use later.
	$(foreach NAME,$(KERNELNAME), \
	    -mv -f $(TREE_DIR)/boot/$(NAME) $(TEMP); )
	-rmdir $(TREE_DIR)/boot/

	# Old cruft. Do we need it, does it work?
ifdef EXTRAFILES
	# Copy in any extra files
	for file in $(EXTRAFILES); do \
		mkdir -p $(TREE_DIR)/`dirname $$file`; \
		cp -a $$file $(TREE_DIR)/$$file; \
	done
endif

	# Old cruft. Do we need it, does it work?
ifdef EXTRALIBS
	# Copy in any extra libs.
	cp -a $(EXTRALIBS) $(TREE_DIR)/lib/
endif

	# Copy UDEBS into tree
	set -e; if [ $(TREE_EXTRAS) ]; then \
	  ./udebs_flat_install $(TREE_DIR) $(TREE_UDEB); \
	else \
	  ./mirror_install $(TREE_DIR) udeb $(TREE_UDEB); \
	fi

	# Copy DEBS into tree
	./mirror_install $(TREE_DIR) deb $(TREE_DEB)

######################################################################

# Image creation

$(DEST)/initrd-%.img: INITRD_TYPE=$(shell echo $* | cut -d"-" -f1)
$(DEST)/initrd-%.img:
	$(MAKE) initrd-$* TREE_DIR=$(TEMP)/tree-initrd-$* INITRD_TYPE=$(INITRD_TYPE)

initrd-%:
	$(MAKE) tree-$*-none-none
	mv $(TREE_DIR)/all.utf $(TEMP)/all-$(INITRD_TYPE).utf
	# Only build the font if we have rootskel-locale
	if [ -d "$(LOCALE_PATH)/C.UTF-8" ]; then \
	    $(MAKE) $(TREE_DIR)/unifont.bgf; \
	fi
	rm -f $(TEMP_IMAGE) $(TEMP_IMAGE).gz
	install -d $(TEMP)
	install -d $(DEST)

	if [ $(INITRD_FS) = ext2 ]; then \
		genext2fs -d $(TREE_DIR) -b `expr $$(du -s $(TREE_DIR) | cut -f 1) + $$(expr $$(find $(TREE_DIR) | wc -l) \* 2)` $(TEMP_IMAGE); \
	elif [ $(INITRD_FS) = romfs ]; then \
		genromfs -d $(TREE_DIR) -f $(TEMP_IMAGE); \
	else \
		echo "Unsupported filesystem type"; \
		exit 1; \
	fi;
	gzip -vc9 $(TEMP_IMAGE) > $(TEMP_IMAGE).gz
	mv $(TEMP_IMAGE).gz $(DEST)/initrd-$*.img

$(DEST)/floppy-%.img: FLOPPY_TYPE=$(shell echo $* | cut -d"-" -f2)
$(DEST)/floppy-%.img:
	$(MAKE) floppy-$* TREE_DIR=$(TEMP)/tree-floppy-$* FLOPPY_TYPE=$(FLOPPY_TYPE)

floppy-boot-%:
	$(MAKE) $(DEST)/initrd-$(FLOPPY_TYPE).img
	$(MAKE) tree-none-none-none
	cp $(DEST)/initrd-$(FLOPPY_TYPE).img $(TREE_DIR)/initrd.gz
	$(MAKE) arch-floppy-pre_image
	$(MAKE) arch-floppy-image
	$(MAKE) arch-floppy-post_image
	mv $(TEMP_IMAGE) $(DEST)/floppy-boot-$(FLOPPY_TYPE).img

floppy-root-%:
	$(MAKE) $(DEST)/initrd-$(FLOPPY_TYPE).img
	$(MAKE) tree-none-none-none
	cp $(DEST)/initrd-$(FLOPPY_TYPE).img $(TREE_DIR)/initrd.gz
	$(MAKE) arch-floppy-image
	mv $(TEMP_IMAGE) $(DEST)/floppy-root-$(FLOPPY_TYPE).img

floppy-data-%:
	$(MAKE) tree-none-$(FLOPPY_TYPE)-none-none
	set -e; if [ $(INITRD_FS) = ext2 ]; then \
	  genext2fs -d $(TREE_DIR) -b $(FLOPPY_SIZE) -r 0 $(TEMP_IMAGE); \
	elif [ $(INITRD_FS) = romfs ]; then \
	  genromfs -d $(TREE_DIR)/ -f $(TEMP_IMAGE); \
	else \
	  echo "Unsupported filesystem type"; \
	  exit 1; \
	fi
	mv $(TEMP_IMAGE) $(DEST)/floppy-data-$(FLOPPY_TYPE).img

$(DEST)/cdrom-%.img: CDROM_INITRD=$(shell echo $* | cut -d"-" -f1)
$(DEST)/cdrom-%.img: CDROM_UDEB=$(shell echo $* | cut -d"-" -f2)
$(DEST)/cdrom-%.img: CDROM_DEB=$(shell echo $* | cut -d"-" -f3)
$(DEST)/cdrom-%.img: TREE_DIR=$(TEMP)/tree-cdrom-$*
$(DEST)/cdrom-%.img:
	$(MAKE) $(DEST)/initrd-$(CDROM_INITRD).img
	$(MAKE) tree-none-$(CDROM_UDEB)-$(CDROM_DEB) TREE_DIR=$(TREE_DIR)
	$(MAKE) arch-cdrom-pre_image TREE_DIR=$(TREE_DIR) CDROM_INITRD=$(CDROM_INITRD)
	$(MAKE) arch-cdrom-image TREE_DIR=$(TREE_DIR)
	$(MAKE) arch-cdrom-post_image TREE_DIR=$(TREE_DIR)
	mv $(TEMP_IMAGE) $(DEST)/cdrom-$(CDROM_INITRD)-$(CDROM_UDEB)-$(CDROM_DEB).img

######################################################################

# Font generation
$(TEMP)/unifont-reduced-%.bdf: INITRD_TYPE=$*
$(TEMP)/unifont-reduced-%.bdf: $(TEMP)/all-$(INITRD_TYPE).utf
	# Use the UTF-8 locale in rootskel-locale. This target shouldn't
	# be called when it is not present anyway.
	# reduce-font is part of package libbogl-dev
	# unifont.bdf is part of package bf-utf-source
	# The locale must be generated after installing the package locales
	CHARMAP=`LOCPATH=$(LOCALE_PATH) LC_ALL=C.UTF-8 locale charmap`; \
            if [ UTF-8 != "$$CHARMAP" ]; then \
	        echo "error: Trying to build unifont.bgf without rootskel-locale!"; \
	        exit 1; \
	    fi
	LOCPATH=$(LOCALE_PATH) LC_ALL=C.UTF-8 reduce-font /usr/src/unifont.bdf < $(TEMP)/all-$(INITRD_TYPE).utf > $@.tmp
	mv $@.tmp $@

%/unifont.bgf: $(TEMP)/unifont-reduced-$(INITRD_TYPE).bdf
	# bdftobogl is part of package libbogl-dev
	bdftobogl -b $(TEMP)/unifont-reduced-$(INITRD_TYPE).bdf > $@.tmp
	mv $@.tmp $@

######################################################################
######################################################################

mirror-check-foo: stamp/mirror-check
stamp/mirror-check-foo: sources.list stamp/mirror-update
	@echo -n "I: Checking mirror "
	@cat $(MIRROR_DIR)/dists/$(SUITE)/main/binary-$(DEB_HOST_ARCH)/Packages \
	    $(MIRROR_DIR)/dists/$(SUITE)/main/debian-installer/binary-$(DEB_HOST_ARCH)/Packages \
	| egrep "(^Filename:|^Size:|^MD5sum:)" | cut -d" " -f2 \
	| while read FILE; read SIZE; read MD5SUM; do \
	    if [ -f $(MIRROR_DIR)/$$FILE ]; then \
	      if [ "`wc -c $(MIRROR_DIR)/$$FILE`" = "$$SIZE $(MIRROR_DIR)/$$FILE" ]; then \
		if [ "`md5sum $(MIRROR_DIR)/$$FILE`" = "$$MD5SUM  $(MIRROR_DIR)/$$FILE" ]; then \
		  echo -n "."; \
		else \
		  echo -e "\n$$FILE has wrong md5sum"; \
		  exit 1; \
		fi; \
	      else \
                echo -e "\n$$FILE has wrong size"; \
		exit 1; \
	      fi; \
	    else \
	      echo -e "\n$$FILE missing"; \
	      exit 1; \
	    fi; \
	  done
	@echo
	touch stamp/mirror-check

######################################################################
######################################################################

# Housekeeping

clean:
	-rm -rf stamp `echo tmp/* | sed s,tmp/mirror,,`
	-rm -rf udebs diskusage* dest
	-rm -f unifont-* all-* sources.list sources.list.deb sources.list.udeb

mrproper: clean
	-rm -rf tmp sources.list.local config/local localudebs
	-rm -rf apt apt.deb

######################################################################

# Guessing of local config

guess-local:
